using TSP_Add_Shortest.objects;
using TSP_Add_Shortest.solvers;

namespace TSP_Add_Shortest_Tests.solvers
{
    [TestClass]
    public class TestNearestNeighbor
    {
        /// <summary>
        /// Runs a test case to confirm the route generated by Nearest Neightbor
        /// generates the expected route.
        /// </summary>
        /// <param name="nodes"></param>
        /// <param name="expectedOrder"></param>
        private static void RunTest(List<Node> nodes, List<Node> expectedOrder)
        {
            var nearestNeighbor = new NearestNeighbor(nodes);
            nearestNeighbor.Solve();
            var route = nearestNeighbor.GetPath();

            Assert.AreEqual(expectedOrder.Count, route.Count);
            for (int i = 0; i < expectedOrder.Count; i++)
            {
                Assert.AreEqual(expectedOrder[i].id, route[i].id);
            }
        }

        [TestMethod]
        public void Test_Solve_LongRoute()
        {
            var nodes = new List<Node> {
                new(0, 0),
                new(0, 1),
                new(0, 2),
                new(1, 2),
                new(2, 2),
                new(2, 1),
                new(2, 0),
                new(1, 0),
            };

            var expectedOrder = nodes.ToList();
            expectedOrder.Add(nodes[0]);
            RunTest(nodes, expectedOrder);
        }

        [TestMethod]
        public void Test_Solve_UnorderedRoute()
        {
            var a = new Node(0, 0);
            var b = new Node(0, 1);
            var c = new Node(0, 5);
            var d = new Node(0, 3);
            var e = new Node(0, 2);
            var f = new Node(0, 4);
            var g = new Node(0, 8);
            var h = new Node(0, 6);
            var i = new Node(0, 7);

            var nodes = new List<Node> { a, b, c, d, e, f, g, h, i, };
            var expectedOrder = new List<Node> { a, b, e, d, f, c, h, i, g, a, };
            RunTest(nodes, expectedOrder);
        }

        [TestMethod]
        public void Test_Solve_ShortRoute()
        {
            var nodes = new List<Node> {
                new(0, 0),
                new(0, 1),
            };

            var expectedOrder = nodes.ToList();
            expectedOrder.Add(nodes[0]);
            RunTest(nodes, expectedOrder);
        }


        [TestMethod]
        public void Test_Solve_SingleItemRoute()
        {
            var nodes = new List<Node> {
                new(0, 0),
            };

            var expectedOrder = nodes.ToList();
            expectedOrder.Add(nodes[0]);
            RunTest(nodes, expectedOrder);
        }

        [TestMethod]
        public void Test_Constructor_ThrowsWhenEmptyNodes()
        {
            var exception = Assert.ThrowsException<Exception>(
                () => new NearestNeighbor([])
            );
        }
    }
}
